{"version":3,"file":"static/js/333.5b40e43e.chunk.js","mappings":"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","sources":["views/admin/ChatSeller.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport { IoMdClose } from 'react-icons/io'\nimport { FaList } from 'react-icons/fa'\nimport { useParams, Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { get_sellers } from '../../store/Reducers/chatReducer'\nimport { BsEmojiSmile } from 'react-icons/bs'\nimport adminImage from '../../assets/admin.jpg'\nimport sellerImage from '../../assets/seller.png'\nimport toast from 'react-hot-toast'\nimport { send_message_seller_admin, messageClear, get_admin_message, updateSellerMessage } from '../../store/Reducers/chatReducer'\nimport { socket } from '../../utils/utils'\n\nconst ChatSeller = () => {\n\n    const scrollRef = useRef()\n\n    const { sellerId } = useParams()\n    const dispatch = useDispatch()\n    const { sellers, activeSellers, seller_admin_message, currentSeller, successMessage } = useSelector(state => state.chat)\n    const { userInfo } = useSelector(state => state.auth)\n    const [show, setShow] = useState(false)\n    const [recevedMessage, setRecevedMessage] = useState('')\n\n    const [text, setText] = useState('')\n    useEffect(() => {\n        dispatch(get_sellers())\n    }, [])\n\n    const send = (e) => {\n        e.preventDefault()\n        dispatch(send_message_seller_admin({\n            senderId: '',\n            receverId: sellerId,\n            message: text,\n            senderName: 'Myshop support'\n        }))\n        setText('')\n    }\n\n    useEffect(() => {\n        if (sellerId) {\n            dispatch(get_admin_message(sellerId))\n        }\n    }, [sellerId])\n\n    useEffect(() => {\n        if (successMessage) {\n            socket.emit('send_message_admin_to_seller', seller_admin_message[seller_admin_message.length - 1])\n            dispatch(messageClear())\n        }\n    }, [successMessage])\n\n\n    useEffect(() => {\n        socket.on('receved_seller_message', msg => {\n            setRecevedMessage(msg)\n        })\n    }, [])\n\n    useEffect(() => {\n        if (recevedMessage) {\n            if (recevedMessage.senderId === sellerId && recevedMessage.receverId === '') {\n                dispatch(updateSellerMessage(recevedMessage))\n            } else {\n                toast.success(recevedMessage.senderName + ' send a message')\n            }\n        }\n    }, [recevedMessage])\n\n    useEffect(() => {\n        scrollRef.current?.scrollIntoView({ behavior: 'smooth' })\n    }, [seller_admin_message])\n\n\n    return (\n        <div className='px-2 lg:px-7 py-5'>\n            <div className='w-full bg-[#283046] px-4 py-4 rounded-md h-[calc(100vh-140px)]'>\n                <div className='flex w-full h-full relative'>\n                    <div className={`w-[280px] h-full absolute z-10 ${show ? '-left-[16px]' : '-left-[336px]'} md:left-0 md:relative transition-all`}>\n                        <div className='w-full h-[calc(100vh-177px)] bg-[#252b3b] md:bg-transparent overflow-y-auto'>\n                            <div className='flex text-xl justify-between items-center p-4 md:p-0 md:px-3 md:pb-3 text-white'>\n                                <h2>Sellers</h2>\n                                <span onClick={() => setShow(!show)} className='block cursor-pointer md:hidden'><IoMdClose /></span>\n                            </div>\n                            {\n                                sellers.map((s, i) => <Link key={i} to={`/admin/dashboard/chat-sellers/${s._id}`} className={`h-[60px] flex justify-start gap-2 items-center text-white px-2 rounded-sm py-2 cursor-pointer ${sellerId === s._id ? 'bg-slate-700' : ''}`}>\n                                    <div className='relative'>\n                                        <img className='w-[38px] h-[38px] border-white border-2 max-w-[38px] p-[2px] rounded-full' src={s.image ? s.image : sellerImage} alt=\"\" />\n                                        {\n                                            activeSellers.some(a => a.sellerId === s._id) && <div className='w-[10px] h-[10px] bg-green-500 rounded-full absolute right-0 bottom-0'></div>\n                                        }\n                                    </div>\n                                    <div className='flex justify-center items-start flex-col w-full'>\n                                        <div className='flex justify-between items-center w-full'>\n                                            <h2 className='text-base font-semibold'>{s.name}</h2>\n                                        </div>\n                                    </div>\n                                </Link>)\n                            }\n\n                        </div>\n                    </div>\n                    <div className='w-full md:w-[calc(100%-200px)] md:pl-4'>\n                        <div className='flex justify-between items-center'>\n                            {\n                                sellerId && <div className='flex justify-start items-center gap-3'>\n                                    <div className='relative'>\n                                        <img className='w-[42px] h-[42px] border-green-500 border-2  p-[2px] rounded-full' src={currentSeller.image ? currentSeller.image : sellerImage} alt=\"\" />\n                                        <div className='w-[10px] h-[10px] bg-green-500 rounded-full absolute right-0 bottom-0'></div>\n                                    </div>\n                                    <span className='text-white'>{currentSeller?.name}</span>\n                                </div>\n                            }\n                            <div onClick={() => setShow(!show)} className='w-[35px] flex md:hidden h-[35px] rounded-sm bg-blue-500 shadow-lg hover:shadow-blue-500/50 justify-center cursor-pointer items-center text-white'>\n                                <span><FaList /></span>\n                            </div>\n                        </div>\n                        <div className='py-4'>\n                            <div className='bg-slate-800 h-[calc(100vh-290px)] rounded-md p-3 overflow-y-auto'>\n                                {\n                                    sellerId ? seller_admin_message.map((m, i) => {\n                                        if (m.senderId === sellerId) {\n                                            return (\n                                                <div ref={scrollRef} className='w-full flex justify-start items-center'>\n                                                    <div className='flex justify-start items-start gap-2 md:px-3 py-2 max-w-full lg:max-w-[85%]'>\n                                                        <div>\n                                                            <img className='w-[38px] h-[38px] border-2 border-white rounded-full max-w-[38px] p-[3px]' src={currentSeller?.image ? currentSeller?.image : sellerImage} alt=\"\" />\n                                                        </div>\n                                                        <div className='flex justify-center items-start flex-col w-full bg-orange-500 shadow-lg shadow-orange-500/50 text-white py-1 px-2 rounded-sm'>\n                                                            <span>{m.message}</span>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            )\n                                        } else {\n                                            return (\n                                                <div ref={scrollRef} className='w-full flex justify-end items-center'>\n                                                    <div className='flex justify-start items-start gap-2 md:px-3 py-2 max-w-full lg:max-w-[85%]'>\n                                                        <div className='flex justify-center items-start flex-col w-full bg-blue-500 shadow-lg shadow-blue-500/50 text-white py-1 px-2 rounded-sm'>\n                                                            <span>{m.message}</span>\n                                                        </div>\n                                                        <div>\n                                                            <img className='w-[38px] h-[38px] border-2 border-white rounded-full max-w-[38px] p-[3px]' src={userInfo.image ? userInfo.image : adminImage} alt=\"\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            )\n                                        }\n                                    }) : <div className='w-full h-full flex justify-center items-center flex-col gap-2 text-white'>\n                                        <span><BsEmojiSmile /></span>\n                                        <span>Select seller</span>\n                                    </div>\n                                }\n                            </div>\n                        </div>\n                        <form onSubmit={send} className='flex gap-3'>\n                            <input required value={text} onChange={(e) => setText(e.target.value)} readOnly={sellerId ? false : true} className='w-full flex justify-between px-2 border border-slate-700 items-center py-[5px] focus:border-blue-500 rounded-md outline-none bg-transparent text-[#d0d2d6]' type=\"text\" placeholder='input your message' />\n                            <button disabled={sellerId ? false : true} className='shadow-lg bg-cyan-500 hover:shadow-cyan-500/50 text-semibold w-[75px] h-[35px] rounded-md text-white flex justify-center items-center'>Send</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatSeller"],"names":["scrollRef","useRef","sellerId","useParams","dispatch","useDispatch","_useSelector","useSelector","state","chat","sellers","activeSellers","seller_admin_message","currentSeller","successMessage","userInfo","auth","_useState","useState","_useState2","_slicedToArray","show","setShow","_useState3","_useState4","recevedMessage","setRecevedMessage","_useState5","_useState6","text","setText","useEffect","get_sellers","get_admin_message","socket","length","messageClear","msg","senderId","receverId","updateSellerMessage","toast","senderName","_scrollRef$current","current","scrollIntoView","behavior","_jsx","className","children","_jsxs","concat","onClick","IoMdClose","map","s","i","Link","to","_id","src","image","sellerImage","alt","some","a","name","FaList","m","ref","message","adminImage","BsEmojiSmile","onSubmit","e","preventDefault","send_message_seller_admin","required","value","onChange","target","readOnly","type","placeholder","disabled"],"sourceRoot":""}